// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module glvk.Utils:Traits;

import std;

import :Concepts;

export namespace stormkit::core {
    template<class T>
    struct PureTypeTrait {
        using Type = std::remove_cvref_t<T>;
    };

    template<class T>
    using PureType = typename PureTypeTrait<T>::Type;

    template<class T>
    struct RawTypeTrait {
        using Type = std::remove_pointer_t<PureType<T>>;
    };

    template<class T>
    using RawType = typename RawTypeTrait<T>::Type;

    template<std::ranges::range Range>
    struct IteratorTypeTrait {
        using Type = decltype(std::cbegin(std::declval<Range>()));
    };

    template<std::ranges::range Range>
    using IteratorType = typename IteratorTypeTrait<Range>::Type;

    template<std::ranges::range Range>
    struct SentinelTypeTrait {
        using Type = decltype(std::cend(std::declval<Range>()));
    };

    template<std::ranges::range Range>
    using SentinelType = typename SentinelTypeTrait<Range>::Type;

    template<std::ranges::range Range>
    struct RangeTypeTrait {
        using Type = std::remove_cvref_t<decltype(*std::begin(std::declval<Range>()))>;
    };

    template<std::ranges::range Range>
    using RangeType = typename RangeTypeTrait<Range>::Type;

    template<IsArithmetic T, IsArithmetic V>
    constexpr auto isGreater() noexcept;

    template<IsArithmeticPure T, IsArithmeticPure V>
    using SafeNarrowHelperType =
        std::conditional_t<isGreater<PureType<T>, PureType<V>>(), PureType<T>, PureType<V>>;

    template<IsArithmeticPure T, IsArithmeticPure V>
    using SafeNarrowHelperOtherType =
        std::conditional_t<isGreater<PureType<T>, PureType<V>>(), PureType<V>, PureType<T>>;

    template<class T, typename U>
    struct LikeCV {
      private:
        using R  = std::remove_reference_t<T>;
        using U1 = std::conditional_t<std::is_const_v<R>, std::add_const_t<U>, U>;
        using U2 = std::conditional_t<std::is_volatile_v<R>, std::add_volatile_t<U1>, U1>;

      public:
        using type = U2;
    };

    template<class T, typename U>
    using LikeCVType = LikeCV<T, U>::type;

    template<class T, typename U>
    struct LikeRef {
      private:
        using U1 =
            std::conditional_t<std::is_lvalue_reference_v<T>, std::add_lvalue_reference_t<U>, U>;
        using U2 =
            std::conditional_t<std::is_rvalue_reference_v<T>, std::add_rvalue_reference_t<U1>, U1>;

      public:
        using type = U2;
    };

    template<class T, typename U>
    using LikeRefType = LikeRef<T, U>::type;

    template<class T, typename U>
    struct Like {
      private:
        using U1 = LikeCVType<T, U>;
        using U2 = LikeRefType<T, U1>;

      public:
        using type = U2;
    };

    template<class T, typename U>
    using LikeType = Like<T, U>::type;

    template<typename T>
    struct AlwaysFalse: std::false_type {};

    template<typename T>
    using AddConst = const T;

    template<IsEnumeration T>
    using UnderlyingType = std::underlying_type_t<T>;
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    ////////////////////////////////////////
    ////////////////////////////////////////
    template<IsArithmetic T, IsArithmetic V>
    constexpr auto isGreater() noexcept {
        using Type = decltype(T {} + V {});

        return static_cast<Type>(std::numeric_limits<T>::max()) >
               static_cast<Type>(std::numeric_limits<V>::max());
    }
} // namespace stormkit::core